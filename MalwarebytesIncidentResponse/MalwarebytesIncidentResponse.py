#!/usr/local/autopkg/python
#
# Copyright 2021 Wesley Whetstone (weswhet)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json

from autopkglib import Processor, ProcessorError, URLGetter
from oauthlib.oauth2 import BackendApplicationClient
from requests_oauthlib import OAuth2Session

__all__ = ["MalwarebytesIncidentResponse"]


class MalwarebytesIncidentResponse(URLGetter):

    """This processor finds the download URL for the Malwarebytes Nebula installer

    Requires requests_oauthlib pip pkg. Can be installed by running the following.

    `/usr/local/autopkg/python -m pip install requests_oauthlib`
    """

    input_variables = {
        "client_id": {
            "required": True,
            "description": "Malwarebytes Nebula API Client ID.",
        },
        "client_secret": {
            "required": True,
            "description": "Malwarebytes Nebula API Client Secret.",
        },
        "account_id": {
            "required": True,
            "description": "Malwarebytes Nebula account ID.",
        },
    }
    output_variables = {
        "download_url": {"description": "Returns the url to download."},
        "version": {"description": "Returns the version of the package to download."},
    }

    description = __doc__

    def main(self):

        # Define variables
        client_id = self.env.get("client_id")
        client_secret = self.env.get("client_secret")
        account_id = self.env.get("account_id")
        client_scope = ["read"]

        # Verify the input variables were provided
        if not client_id or client_id == "%CLIENT_ID%":
            raise ProcessorError("The input variable 'client_id' was not set!")
        if not client_secret or client_secret == "%CLIENT_SECRET%":
            raise ProcessorError("The input variable 'client_secret' was not set!")
        if not account_id or account_id == "%account_id%":
            raise ProcessorError("The input variable 'account_id' was not set!")

        headers = {"accountid": account_id}

        # Set up our OAuth session and fetch our token.
        # If any of our credentials are invalid we'll get an (Unauthorized) error
        # should be pretty apparent.
        client = BackendApplicationClient(client_id, scope=client_scope)
        nebula = OAuth2Session(client=client, scope=client_scope)
        nebula.headers.update(headers)
        token = nebula.fetch_token(
            token_url="https://api.malwarebytes.com/oauth2/token",
            client_secret=client_secret,
            scope=" ".join(client_scope),
        )

        # Fetch all the available installers
        installers = nebula.get("https://api.malwarebytes.com/nebula/v1/installers")
        response = installers.json()
        self.output(f"Installer API Response: {response}", verbose_level=3)

        # We only want the mac_os url
        try:
            dl_url = response["mac_os"]["url"]
        except KeyError:
            self.output(f"Installer API Response: {response}", verbose_level=1)
            raise ProcessorError(
                "Failed to get the mac_os installer info from the API response"
            )

        self.env["download_url"] = dl_url
        self.output(f"Download URL:  {dl_url}", verbose_level=1)


if __name__ == "__main__":
    processor = MalwarebytesIncidentResponse()
    processor.execute_shell()
